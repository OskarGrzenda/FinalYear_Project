{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { authentication } from \"../Firebase\";\nimport { signInWithEmailAndPassword, signOut, updatePassword, sendPasswordResetEmail } from \"firebase/auth\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction LogInScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      passsword = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      forgotPasswordBoolean = _useState6[0],\n      setForgotPasswordBoolean = _useState6[1];\n\n  var logo = '../pictures/GymTrackerLogo.png';\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      emailPassword = _useState8[0],\n      setNewPasswordEmail = _useState8[1];\n\n  var LogInUser = function LogInUser() {\n    signInWithEmailAndPassword(authentication, email, passsword).then(function (re) {\n      navigation.navigate('MainMenuScreen');\n    }).catch(function (err) {\n      console.log(err);\n      Alert.alert(\"Error\", \"Invalid Log In Information\", [{\n        text: \"Cancel\"\n      }]);\n    });\n  };\n\n  var setBooleanTrue = function setBooleanTrue() {\n    setForgotPasswordBoolean(true);\n  };\n\n  var setBooleanFalse = function setBooleanFalse() {\n    setForgotPasswordBoolean(false);\n  };\n\n  var resetPassword = function resetPassword() {\n    sendPasswordResetEmail(authentication, emailPassword).then(function () {}).catch(function (error) {\n      console.log(\"Error\");\n    });\n  };\n\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    children: forgotPasswordBoolean == true ? _jsxs(View, {\n      style: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: [_jsx(Image, {\n        source: require(logo),\n        style: {\n          width: 370,\n          height: 100,\n          resizeMode: 'contain'\n        }\n      }), _jsx(Text, {\n        style: styles.textStyle,\n        children: \"Enter account email\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        value: emailPassword,\n        onChangeText: function onChangeText(text) {\n          return setNewPasswordEmail(text);\n        },\n        placeholder: \"Enter Account Email\"\n      }), _jsxs(View, {\n        style: {\n          width: 200\n        },\n        children: [_jsx(Button, {\n          title: \"Send Reset Link\",\n          onPress: resetPassword\n        }), _jsx(View, {\n          style: styles.space\n        }), _jsx(Button, {\n          title: \"Back\",\n          onPress: setBooleanFalse\n        })]\n      })]\n    }) : _jsxs(View, {\n      style: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: [_jsx(Image, {\n        source: require(logo),\n        style: {\n          width: 370,\n          height: 100,\n          resizeMode: 'contain'\n        }\n      }), _jsx(Text, {\n        style: styles.textStyle,\n        children: \"Enter Email\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        value: email,\n        onChangeText: function onChangeText(text) {\n          return setEmail(text);\n        },\n        placeholder: \"Email\"\n      }), _jsx(Text, {\n        style: styles.textStyle,\n        children: \"Enter Password\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        value: passsword,\n        onChangeText: function onChangeText(text) {\n          return setPassword(text);\n        },\n        placeholder: \"Password\",\n        secureTextEntry: true\n      }), _jsx(Pressable, {\n        onPress: setBooleanTrue,\n        children: _jsx(Text, {\n          children: \"Forgot Password?\"\n        })\n      }), _jsx(View, {\n        style: {\n          width: 200\n        },\n        children: _jsx(Button, {\n          title: \"Sign In\",\n          onPress: LogInUser\n        })\n      })]\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  input: {\n    height: 40,\n    width: 240,\n    margin: 12,\n    borderWidth: 2,\n    padding: 10,\n    backgroundColor: 'white'\n  },\n  textStyle: {\n    fontWeight: 'bold'\n  },\n  space: {\n    width: 20,\n    height: 20\n  }\n});\nexport default LogInScreen;","map":{"version":3,"sources":["C:/Users/oskar/Documents/SemesterTwo/FinalYear_Project/GymTrackerApp/screens/LoginScreen.js"],"names":["React","useState","authentication","signInWithEmailAndPassword","signOut","updatePassword","sendPasswordResetEmail","LogInScreen","navigation","email","setEmail","passsword","setPassword","forgotPasswordBoolean","setForgotPasswordBoolean","logo","emailPassword","setNewPasswordEmail","LogInUser","then","re","navigate","catch","err","console","log","Alert","alert","text","setBooleanTrue","setBooleanFalse","resetPassword","error","flex","alignItems","justifyContent","require","width","height","resizeMode","styles","textStyle","input","space","StyleSheet","create","container","backgroundColor","margin","borderWidth","padding","fontWeight"],"mappings":";;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,cAAT;AACA,SAASC,0BAAT,EAAqCC,OAArC,EAA8CC,cAA9C,EAA8DC,sBAA9D,QAA4F,eAA5F;;;;AAEA,SAASC,WAAT,OAAqC;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AACnC,kBAA0BP,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOQ,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAiCT,QAAQ,CAAC,EAAD,CAAzC;AAAA;AAAA,MAAOU,SAAP;AAAA,MAAkBC,WAAlB;;AAGA,mBAA0DX,QAAQ,CAAC,KAAD,CAAlE;AAAA;AAAA,MAAOY,qBAAP;AAAA,MAA8BC,wBAA9B;;AACA,MAAMC,IAAI,GAAG,gCAAb;;AAIA,mBAA6Cd,QAAQ,CAAC,EAAD,CAArD;AAAA;AAAA,MAAOe,aAAP;AAAA,MAAsBC,mBAAtB;;AAIA,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAI;AAEpBf,IAAAA,0BAA0B,CAACD,cAAD,EAAiBO,KAAjB,EAAwBE,SAAxB,CAA1B,CAECQ,IAFD,CAEM,UAACC,EAAD,EAAO;AAKTZ,MAAAA,UAAU,CAACa,QAAX,CAAoB,gBAApB;AAiBH,KAxBD,EAyBCC,KAzBD,CAyBO,UAACC,GAAD,EAAO;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAG,MAAAA,KAAK,CAACC,KAAN,CAEE,OAFF,EAGE,4BAHF,EAIE,CACE;AACEC,QAAAA,IAAI,EAAE;AADR,OADF,CAJF;AAUD,KArCD;AAsCD,GAxCD;;AA0CA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3Bf,IAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACD,GAFD;;AAIA,MAAMgB,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5BhB,IAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACD,GAFD;;AAIA,MAAMiB,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BzB,IAAAA,sBAAsB,CAACJ,cAAD,EAAiBc,aAAjB,CAAtB,CACCG,IADD,CACM,YACN,CAYC,CAdD,EAcGG,KAdH,CAcS,UAACU,KAAD,EACT;AAGER,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,KAnBD;AAsBD,GAvBD;;AAyBA,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEQ,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,UAAU,EAAE,QAAvB;AAAiCC,MAAAA,cAAc,EAAE;AAAjD,KAAb;AAAA,cAGItB,qBAAqB,IAAI,IAAzB,GACA,MAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEoB,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,UAAU,EAAE,QAAvB;AAAiCC,QAAAA,cAAc,EAAE;AAAjD,OAAb;AAAA,iBAEE,KAAC,KAAD;AAAO,QAAA,MAAM,EAAEC,OAAO,CAACrB,IAAD,CAAtB;AAA8B,QAAA,KAAK,EAAE;AAAEsB,UAAAA,KAAK,EAAE,GAAT;AAAcC,UAAAA,MAAM,EAAE,GAAtB;AAA2BC,UAAAA,UAAU,EAAE;AAAvC;AAArC,QAFF,EAIE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA,QAJF,EAME,KAAC,SAAD;AACA,QAAA,KAAK,EAAED,MAAM,CAACE,KADd;AAEA,QAAA,KAAK,EAAE1B,aAFP;AAGA,QAAA,YAAY,EAAE,sBAAAY,IAAI;AAAA,iBAAIX,mBAAmB,CAACW,IAAD,CAAvB;AAAA,SAHlB;AAIA,QAAA,WAAW,EAAC;AAJZ,QANF,EA2BE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACS,UAAAA,KAAK,EAAE;AAAR,SAAb;AAAA,mBACE,KAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,iBAAd;AAAgC,UAAA,OAAO,EAAEN;AAAzC,UADF,EAEE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAES,MAAM,CAACG;AAApB,UAFF,EAGE,KAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,MAAd;AAAqB,UAAA,OAAO,EAAEb;AAA9B,UAHF;AAAA,QA3BF;AAAA,MADA,GAsCC,MAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEG,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,UAAU,EAAE,QAAvB;AAAiCC,QAAAA,cAAc,EAAE;AAAjD,OAAb;AAAA,iBACG,KAAC,KAAD;AAAO,QAAA,MAAM,EAAEC,OAAO,CAACrB,IAAD,CAAtB;AAA8B,QAAA,KAAK,EAAE;AAAEsB,UAAAA,KAAK,EAAE,GAAT;AAAcC,UAAAA,MAAM,EAAE,GAAtB;AAA2BC,UAAAA,UAAU,EAAE;AAAvC;AAArC,QADH,EAGG,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA,QAHH,EAKG,KAAC,SAAD;AACE,QAAA,KAAK,EAAED,MAAM,CAACE,KADhB;AAEE,QAAA,KAAK,EAAEjC,KAFT;AAGE,QAAA,YAAY,EAAE,sBAAAmB,IAAI;AAAA,iBAAIlB,QAAQ,CAACkB,IAAD,CAAZ;AAAA,SAHpB;AAIE,QAAA,WAAW,EAAC;AAJd,QALH,EAYG,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEY,MAAM,CAACC,SAApB;AAAA;AAAA,QAZH,EAcG,KAAC,SAAD;AACE,QAAA,KAAK,EAAED,MAAM,CAACE,KADhB;AAEE,QAAA,KAAK,EAAE/B,SAFT;AAGE,QAAA,YAAY,EAAE,sBAAAiB,IAAI;AAAA,iBAAIhB,WAAW,CAACgB,IAAD,CAAf;AAAA,SAHpB;AAIE,QAAA,WAAW,EAAC,UAJd;AAKE,QAAA,eAAe;AALjB,QAdH,EAsBG,KAAC,SAAD;AAAW,QAAA,OAAO,EAAEC,cAApB;AAAA,kBACE,KAAC,IAAD;AAAA;AAAA;AADF,QAtBH,EA0BG,KAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACQ,UAAAA,KAAK,EAAE;AAAR,SAAb;AAAA,kBACE,KAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,SAAd;AAAwB,UAAA,OAAO,EAAEnB;AAAjC;AADF,QA1BH;AAAA;AAzCL,IADF;AA6ED;;AAED,IAAMsB,MAAM,GAAGI,UAAU,CAACC,MAAX,CACd;AACCC,EAAAA,SAAS,EAAE;AACTb,IAAAA,IAAI,EAAE,CADG;AAETc,IAAAA,eAAe,EAAE,MAFR;AAGTb,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP,GADZ;AAQCO,EAAAA,KAAK,EAAE;AACLJ,IAAAA,MAAM,EAAE,EADH;AAELD,IAAAA,KAAK,EAAE,GAFF;AAGLW,IAAAA,MAAM,EAAE,EAHH;AAILC,IAAAA,WAAW,EAAE,CAJR;AAKLC,IAAAA,OAAO,EAAE,EALJ;AAMLH,IAAAA,eAAe,EAAE;AANZ,GARR;AAgBCN,EAAAA,SAAS,EAAE;AACTU,IAAAA,UAAU,EAAE;AADH,GAhBZ;AAmBCR,EAAAA,KAAK,EAAE;AACLN,IAAAA,KAAK,EAAE,EADF;AAELC,IAAAA,MAAM,EAAE;AAFH;AAnBR,CADc,CAAf;AA0BA,eAAe/B,WAAf","sourcesContent":["import { StyleSheet, Text, View, Button, TextInput, Alert, Pressable, Image } from 'react-native';\r\nimport * as React from 'react';\r\nimport { useState } from 'react';\r\nimport { authentication } from '../Firebase';\r\nimport { signInWithEmailAndPassword, signOut, updatePassword, sendPasswordResetEmail } from \"firebase/auth\";\r\n\r\nfunction LogInScreen({ navigation }) {\r\n  const [email, setEmail] = useState('')\r\n  const [passsword, setPassword] = useState('')\r\n  // const user = authentication.currentUser;\r\n\r\n  const [forgotPasswordBoolean, setForgotPasswordBoolean] = useState(false);\r\n  const logo = '../pictures/GymTrackerLogo.png';\r\n\r\n  // const [newPassword, setNewPassword] = useState('')\r\n  // const [confirmNewPassword, setConfirmNewPassword] = useState('')\r\n  const [emailPassword, setNewPasswordEmail] = useState('')\r\n  // const user = emailPassword;\r\n\r\n\r\n  const LogInUser = ()=>{\r\n\r\n    signInWithEmailAndPassword(authentication, email, passsword)\r\n\r\n    .then((re) =>{\r\n      // setIsSignedIn(true);\r\n      // console.log(authentication.currentUser.emailVerified);\r\n      // if(authentication.currentUser.emailVerified == true)\r\n      // {\r\n        navigation.navigate('MainMenuScreen')\r\n      // }\r\n      // else\r\n      // {\r\n      //   Alert.alert\r\n      //   (\r\n      //     \"Error\",\r\n      //     \"Email has not been verified!\",\r\n      //     [\r\n      //       {\r\n      //         text: \"Cancel\",\r\n      //       },\r\n      //     ],\r\n      //   );\r\n      // }\r\n      // navigation.navigate('MainMenuScreen')\r\n\r\n    })\r\n    .catch((err)=>{\r\n      console.log(err);\r\n      Alert.alert\r\n      (\r\n        \"Error\",\r\n        \"Invalid Log In Information\",\r\n        [\r\n          {\r\n            text: \"Cancel\",\r\n          },\r\n        ],\r\n      );\r\n    })\r\n  }\r\n\r\n  const setBooleanTrue = () => {\r\n    setForgotPasswordBoolean(true);\r\n  }\r\n\r\n  const setBooleanFalse = () => {\r\n    setForgotPasswordBoolean(false);\r\n  }\r\n\r\n  const resetPassword = () => {\r\n    sendPasswordResetEmail(authentication, emailPassword)\r\n    .then(() => \r\n    {\r\n      // Update successful.\r\n      //Alert causes error\r\n      // Alert.alert\r\n      // (\r\n      //   \"New Password Set\",\r\n      //   [\r\n      //     {\r\n      //       text: \"Cancel\",\r\n      //     },\r\n      //   ],\r\n      // );\r\n    }).catch((error) => \r\n    {\r\n      // An error ocurred\r\n      // ...\r\n      console.log(\"Error\");\r\n    });\r\n    // setForgotPasswordBoolean(false);\r\n\r\n  }\r\n\r\n  return (\r\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n\r\n\r\n       {forgotPasswordBoolean == true?\r\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}> \r\n\r\n          <Image source={require(logo)} style={{ width: 370, height: 100, resizeMode: 'contain' }}/>\r\n\r\n          <Text style={styles.textStyle}>Enter account email</Text>\r\n\r\n          <TextInput\r\n          style={styles.input}\r\n          value={emailPassword}\r\n          onChangeText={text => setNewPasswordEmail(text)}\r\n          placeholder=\"Enter Account Email\"\r\n            />\r\n\r\n          {/* <TextInput\r\n          style={styles.input}\r\n          value={newPassword}\r\n          onChangeText={text => setNewPassword(text)}\r\n          placeholder=\"New Password\"\r\n            />\r\n\r\n          <TextInput\r\n          style={styles.input}\r\n          value={confirmNewPassword}\r\n          onChangeText={text => setConfirmNewPassword(text)}\r\n          placeholder=\"Confirm new Password\"\r\n            /> */}\r\n\r\n          <View style={{width: 200}}>\r\n            <Button title=\"Send Reset Link\" onPress={resetPassword}></Button>\r\n            <View style={styles.space} />\r\n            <Button title=\"Back\" onPress={setBooleanFalse}></Button>\r\n          </View>\r\n\r\n        </View>\r\n\r\n         :\r\n\r\n         <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n            <Image source={require(logo)} style={{ width: 370, height: 100, resizeMode: 'contain' }}/>\r\n\r\n            <Text style={styles.textStyle}>Enter Email</Text>\r\n\r\n            <TextInput\r\n              style={styles.input}\r\n              value={email}\r\n              onChangeText={text => setEmail(text)}\r\n              placeholder=\"Email\"\r\n            />\r\n\r\n            <Text style={styles.textStyle}>Enter Password</Text>\r\n\r\n            <TextInput\r\n              style={styles.input}\r\n              value={passsword}\r\n              onChangeText={text => setPassword(text)}\r\n              placeholder=\"Password\"\r\n              secureTextEntry\r\n            />\r\n\r\n            <Pressable onPress={setBooleanTrue}>\r\n              <Text>Forgot Password?</Text>\r\n            </Pressable>\r\n\r\n            <View style={{width: 200}}>\r\n              <Button title=\"Sign In\" onPress={LogInUser}></Button>\r\n            </View>\r\n\r\n          </View>\r\n      }\r\n\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create\r\n({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n\r\n  input: {\r\n    height: 40,\r\n    width: 240,\r\n    margin: 12,\r\n    borderWidth: 2,\r\n    padding: 10,\r\n    backgroundColor: 'white'\r\n  },\r\n  textStyle: {\r\n    fontWeight: 'bold',\r\n  },\r\n  space: {\r\n    width: 20, // or whatever size you need\r\n    height: 20,\r\n  },\r\n});\r\n\r\nexport default LogInScreen;\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}