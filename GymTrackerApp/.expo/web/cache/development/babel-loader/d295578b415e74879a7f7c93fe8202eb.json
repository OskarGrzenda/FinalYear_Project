{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { db, useAuth, authentication } from \"../Firebase\";\nimport { ref, uploadBytes, getStorage, getDownloadURL } from \"firebase/storage\";\nimport { collection, doc, setDoc, deleteDoc, onSnapshot, updateDoc, deleteField, FieldValue, arrayUnion, arrayRemove, Timestamp } from 'firebase/firestore';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ProgressPictures = function ProgressPictures() {\n  var currentUser = useAuth();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      weight = _useState2[0],\n      setWeight = _useState2[1];\n\n  var storage = getStorage();\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      workoutsDB = _useState4[0],\n      setWorkoutsDB = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      image = _useState6[0],\n      setImage = _useState6[1];\n\n  useEffect(function () {\n    var realtime = onSnapshot(collection(db, \"ProgressInfo\"), function (snapshot) {\n      setWorkoutsDB(snapshot.docs.map(function (doc) {\n        return _objectSpread(_objectSpread({}, doc.data()), {}, {\n          id: doc.id\n        });\n      }));\n    });\n    return realtime;\n  }, []);\n\n  var pickImage = function pickImage() {\n    var result, randomCollection, reff, img, bytes, reference;\n    return _regeneratorRuntime.async(function pickImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context.sent;\n\n            if (result.cancelled) {\n              _context.next = 18;\n              break;\n            }\n\n            randomCollection = Math.random().toString();\n            console.log(\"Before its set \" + randomCollection);\n            reff = ref(storage, (currentUser == null ? void 0 : currentUser.uid) + '/' + randomCollection);\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(fetch(result.uri));\n\n          case 9:\n            img = _context.sent;\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(img.blob());\n\n          case 12:\n            bytes = _context.sent;\n            _context.next = 15;\n            return _regeneratorRuntime.awrap(uploadBytes(reff, bytes));\n\n          case 15:\n            reference = ref(storage, (currentUser == null ? void 0 : currentUser.uid) + '/' + randomCollection);\n            _context.next = 18;\n            return _regeneratorRuntime.awrap(getDownloadURL(reference).then(function (x) {\n              console.log(\"The Url \" + x);\n              var randomProgressID = Math.random().toString();\n              setDoc(doc(db, \"ProgressInfo\", randomProgressID), {\n                date: Timestamp.now().toDate(),\n                weight: weight,\n                uid: currentUser.uid,\n                image: x\n              });\n            }));\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsx(ScrollView, {\n    children: _jsxs(View, {\n      style: {\n        flex: 1,\n        alignItems: 'center'\n      },\n      children: [_jsx(Text, {\n        children: \"Progress Pictures\"\n      }), _jsxs(Text, {\n        children: [\"Currently logged in as: \", currentUser == null ? void 0 : currentUser.email]\n      }), _jsxs(Text, {\n        children: [\"User Id: \", currentUser == null ? void 0 : currentUser.uid]\n      }), _jsx(View, {\n        style: {\n          flexDirection: \"row\"\n        },\n        children: _jsx(TextInput, {\n          style: styles.input,\n          placeholder: \"Weight\",\n          onChangeText: setWeight\n        })\n      }), _jsx(Button, {\n        title: \"Select Profile Picture\",\n        onPress: pickImage\n      }), workoutsDB.map(function (data) {\n        if (data.uid == (currentUser == null ? void 0 : currentUser.uid)) {\n          return _jsxs(View, {\n            children: [_jsx(Text, {\n              children: data.date.toString()\n            }), _jsx(Text, {\n              children: data.weight\n            }), _jsx(Image, {\n              source: {\n                uri: data.image\n              },\n              style: {\n                width: 200,\n                height: 200\n              }\n            })]\n          });\n        }\n      })]\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10\n  }\n});\nexport default ProgressPictures;","map":{"version":3,"sources":["C:/Users/oskar/Documents/SemesterTwo/FinalYear_Project/GymTrackerApp/screens/ProgressPictures.js"],"names":["React","useState","useEffect","ImagePicker","db","useAuth","authentication","ref","uploadBytes","getStorage","getDownloadURL","collection","doc","setDoc","deleteDoc","onSnapshot","updateDoc","deleteField","FieldValue","arrayUnion","arrayRemove","Timestamp","ProgressPictures","currentUser","weight","setWeight","storage","workoutsDB","setWorkoutsDB","image","setImage","realtime","snapshot","docs","map","data","id","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","cancelled","randomCollection","Math","random","toString","console","log","reff","uid","fetch","uri","img","blob","bytes","reference","then","x","randomProgressID","date","now","toDate","flex","alignItems","email","flexDirection","styles","input","width","height","StyleSheet","create","margin","borderWidth","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, View, TextInput, Button, Text, Image, Platform, ScrollView} from 'react-native';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport { db, useAuth, authentication } from \"../Firebase\";\r\nimport { ref, uploadBytes, getStorage, getDownloadURL } from \"firebase/storage\";\r\nimport { collection, doc, setDoc, deleteDoc, onSnapshot, updateDoc, deleteField, FieldValue, arrayUnion, arrayRemove, Timestamp } from 'firebase/firestore';\r\n\r\nconst ProgressPictures = () => {\r\n\r\n    const currentUser = useAuth();\r\n    // const [randomImage, setRandomImage] = useState([]);\r\n    const [weight, setWeight] = useState([]);\r\n    const storage = getStorage();\r\n    const [workoutsDB, setWorkoutsDB] = useState([]);\r\n    const [image, setImage] = useState(null);\r\n\r\n    // const [form, setForm] = useState({\r\n    //   weight: \"\",\r\n    //   image: \"\",\r\n    // })\r\n\r\n\r\n    useEffect (() => {\r\n      const realtime = onSnapshot(collection(db, \"ProgressInfo\"), (snapshot) => {\r\n        setWorkoutsDB(snapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id })));\r\n      });\r\n      return realtime;\r\n    }, []);\r\n\r\n    // const saveToDatabase = async () => \r\n    // {\r\n    //   const reference = ref(storage, currentUser?.uid + '/'+ 'test.jpg' ); //+ 'test.jpg'\r\n    //   await getDownloadURL(reference).then((x) => {\r\n    //     setImage(x);\r\n    //     console.log(x);\r\n    //   })\r\n    //   //Set New Exercise Name & Add it to a new document in the collection \r\n    //   const randomProgressID = Math.random().toString();\r\n    //   await setDoc(doc(db, \"ProgressInfo\", randomProgressID ), {\r\n    //     date: Timestamp.now().toDate(),\r\n    //     weight: weight,\r\n    //     uid: currentUser.uid,\r\n    //     image: image,\r\n    //   })\r\n    // };\r\n\r\n\r\n    const pickImage = async () => {\r\n        // No permissions request is necessary for launching the image library\r\n        let result = await ImagePicker.launchImageLibraryAsync({\r\n          mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n          allowsEditing: true,\r\n          aspect: [4, 3],\r\n          quality: 1,\r\n        });\r\n    \r\n        // console.log(result);\r\n\r\n        if (!result.cancelled) {\r\n          const randomCollection = Math.random().toString();\r\n          // setRandomImage(randomCollection);\r\n          console.log(\"Before its set \"+randomCollection);\r\n          //Save it to this location with this name\r\n          const reff = ref(storage, currentUser?.uid + '/' + randomCollection);\r\n          //Convert image to array of bytes instead of a string\r\n          const img = await fetch(result.uri);\r\n          const bytes = await img.blob();\r\n\r\n          await uploadBytes(reff, bytes);  \r\n\r\n          const reference = ref(storage, currentUser?.uid + '/'+ randomCollection ); //+ 'test.jpg'\r\n          // console.log(\"After its set \"+randomImage);\r\n          await getDownloadURL(reference).then((x) => {\r\n            // setImage(x);\r\n            console.log(\"The Url \" + x);\r\n            //Set New Exercise Name & Add it to a new document in the collection \r\n            const randomProgressID = Math.random().toString();\r\n             setDoc(doc(db, \"ProgressInfo\", randomProgressID ), {\r\n              date: Timestamp.now().toDate(),\r\n              weight: weight,\r\n              uid: currentUser.uid,\r\n              image: x,\r\n            })\r\n          })\r\n\r\n\r\n        }\r\n      };\r\n\r\n      // // Return image from storage\r\n      // useEffect (() => {\r\n      //   const func = async () => {\r\n      //     //Where you will be returning from\r\n      //     const reference = ref(storage, currentUser?.uid + '/'+ 'test.jpg' ); //+ 'test.jpg'\r\n      //     await getDownloadURL(reference).then((x) => {\r\n      //       setImage(x);\r\n      //       console.log(x);\r\n      //     })\r\n      //   }\r\n      //   func();\r\n      // }, []);\r\n\r\n    return (\r\n      <ScrollView>\r\n        <View style={{ flex: 1, alignItems: 'center' }}>\r\n            <Text>Progress Pictures</Text>\r\n\r\n            <Text>Currently logged in as: {currentUser?.email}</Text>\r\n            <Text>User Id: {currentUser?.uid}</Text>\r\n\r\n            <View style={{ flexDirection:\"row\" }}>\r\n\r\n                {/* <TextInput\r\n                    style={styles.input}\r\n                    placeholder='Date'\r\n                    onChangeText={setDate}\r\n                    >\r\n                </TextInput>       */}\r\n                <TextInput\r\n                    style={styles.input}\r\n                    placeholder='Weight'\r\n                    onChangeText={setWeight}\r\n                    >\r\n                </TextInput>\r\n            </View>\r\n            {/* <Button onPress={() => saveToDatabase() } title='save' color='coral' />  */}\r\n\r\n            <Button title=\"Select Profile Picture\" onPress={pickImage} />\r\n            {/* {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />} */}\r\n\r\n            {workoutsDB.map((data) => {\r\n              if(data.uid == currentUser?.uid)\r\n              {\r\n                return(\r\n                  <View>\r\n                    <Text>\r\n                      {data.date.toString()}\r\n                    </Text>\r\n                    <Text>\r\n                      {data.weight}\r\n                    </Text>\r\n                    <Image source={{ uri: data.image }} style={{ width: 200, height: 200 }} />\r\n\r\n                  </View>\r\n                )\r\n              }\r\n            })}\r\n        </View>\r\n        </ScrollView>\r\n\r\n\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create\r\n({\r\n  input: {\r\n    height: 40,\r\n    margin: 12,\r\n    borderWidth: 1,\r\n    padding: 10,\r\n  },\r\n});\r\n\r\nexport default ProgressPictures;\r\n"]},"metadata":{},"sourceType":"module"}