{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport React, { useState, useEffect } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { db, useAuth, authentication } from \"../Firebase\";\nimport { collection, doc, setDoc, deleteDoc, onSnapshot, updateDoc, deleteField, FieldValue, arrayUnion, arrayRemove } from 'firebase/firestore';\nimport { MainMenuScreen } from \"./MainMenuScreen\";\nimport { LineChart, BarChart, PieChart, ProgressChart, ContributionGraph } from 'react-native-chart-kit';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ExerciseScreen(_ref) {\n  var route = _ref.route;\n  var id = route.params.id;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      workoutsDB = _useState2[0],\n      setWorkoutsDB = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      name = _useState4[0],\n      setName = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      weight = _useState6[0],\n      setWeight = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      reps = _useState8[0],\n      setReps = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      sets = _useState10[0],\n      setSets = _useState10[1];\n\n  var exerciseName = function exerciseName(val) {\n    setName(val);\n  };\n\n  var exerciseWeight = function exerciseWeight(val) {\n    setWeight(val);\n  };\n\n  var exerciseReps = function exerciseReps(val) {\n    setReps(val);\n  };\n\n  var exerciseSets = function exerciseSets(val) {\n    setSets(val);\n  };\n\n  useEffect(function () {\n    var realtime = onSnapshot(collection(db, \"WorkoutDay\"), function (snapshot) {\n      setWorkoutsDB(snapshot.docs.map(function (doc) {\n        return _objectSpread(_objectSpread({}, doc.data()), {}, {\n          id: doc.id\n        });\n      }));\n    });\n    return realtime;\n  }, []);\n\n  var sendToDatabase = function sendToDatabase() {\n    var randomExerciseID;\n    return _regeneratorRuntime.async(function sendToDatabase$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            randomExerciseID = Math.random().toString();\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(updateDoc(doc(db, \"WorkoutDay\", id), {\n              exerciseArray: arrayUnion({\n                exercise: name,\n                weight: weight,\n                reps: reps,\n                sets: sets,\n                exerciseUID: randomExerciseID\n              })\n            }));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var deletDoc = function deletDoc(exercise, weight, reps, sets, exerciseUID, object) {\n    return _regeneratorRuntime.async(function deletDoc$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(exercise);\n            console.log(exerciseUID);\n            console.log(object);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsx(ScrollView, {\n    children: _jsxs(View, {\n      style: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: [_jsx(Text, {\n        children: \"Exercises\"\n      }), _jsx(Text, {\n        children: id\n      }), _jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"Exercise Name\",\n        onChangeText: exerciseName\n      }), _jsxs(View, {\n        style: {\n          flexDirection: \"row\"\n        },\n        children: [_jsx(TextInput, {\n          style: styles.input,\n          placeholder: \"Weight\",\n          onChangeText: exerciseWeight\n        }), _jsx(TextInput, {\n          style: styles.input,\n          placeholder: \"Reps\",\n          onChangeText: exerciseReps\n        }), _jsx(TextInput, {\n          style: styles.input,\n          placeholder: \"Sets\",\n          onChangeText: exerciseSets\n        })]\n      }), _jsx(View, {\n        style: {\n          flexDirection: \"row\"\n        },\n        children: _jsx(Button, {\n          onPress: function onPress() {\n            return sendToDatabase();\n          },\n          title: \"save\",\n          color: \"coral\"\n        })\n      }), workoutsDB.map(function (data) {\n        if (data.ubid == id) {\n            var output = [];\n            var i = 0;\n            var obj;\n\n            for (var object in data.exerciseArray) {\n              obj = data.exerciseArray[object];\n\n              var tempItem = _jsxs(View, {\n                children: [_jsx(Text, {\n                  children: object\n                }), _jsx(Text, {\n                  children: obj.exercise\n                }), _jsxs(View, {\n                  style: {\n                    flexDirection: \"row\"\n                  },\n                  children: [_jsx(Text, {\n                    children: obj.weight\n                  }), _jsx(Text, {\n                    children: obj.reps\n                  }), _jsx(Text, {\n                    children: obj.sets\n                  })]\n                }), _jsx(Button, {\n                  title: obj.exerciseUID,\n                  color: \"red\",\n                  onPress: function onPress() {\n                    return deletDoc(obj.exercise, obj.weight, obj.reps, obj.sets, obj.exerciseUID, object);\n                  }\n                })]\n              });\n\n              output[i] = tempItem;\n              i++;\n            }\n\n            return _jsx(View, {\n              children: output\n            }, data.id);\n          }\n      })]\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 2,\n    padding: 10,\n    backgroundColor: 'white'\n  }\n});\nexport default ExerciseScreen;","map":{"version":3,"sources":["C:/Users/oskar/Documents/SemesterTwo/FinalYear_Project/GymTrackerApp/screens/ExerciseScreen.js"],"names":["React","useState","useEffect","NavigationContainer","db","useAuth","authentication","collection","doc","setDoc","deleteDoc","onSnapshot","updateDoc","deleteField","FieldValue","arrayUnion","arrayRemove","MainMenuScreen","LineChart","BarChart","PieChart","ProgressChart","ContributionGraph","ExerciseScreen","route","id","params","workoutsDB","setWorkoutsDB","name","setName","weight","setWeight","reps","setReps","sets","setSets","exerciseName","val","exerciseWeight","exerciseReps","exerciseSets","realtime","snapshot","docs","map","data","sendToDatabase","randomExerciseID","Math","random","toString","exerciseArray","exercise","exerciseUID","deletDoc","object","console","log","flex","alignItems","justifyContent","styles","input","flexDirection","ubid","output","i","obj","tempItem","StyleSheet","create","container","backgroundColor","height","margin","borderWidth","padding"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, View, Button, TextInput, TouchableOpacity, Pressable, FlatList, Dimensions, ScrollView  } from 'react-native';\r\nimport React, { useState, useEffect } from 'react'\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { db, useAuth, authentication } from \"../Firebase\";\r\nimport { collection, doc, setDoc, deleteDoc, onSnapshot, updateDoc, deleteField, FieldValue, arrayUnion, arrayRemove } from 'firebase/firestore';\r\nimport { MainMenuScreen } from './MainMenuScreen';\r\n\r\nimport {\r\n  LineChart,\r\n  BarChart,\r\n  PieChart,\r\n  ProgressChart,\r\n  ContributionGraph,\r\n} from 'react-native-chart-kit'\r\n\r\nfunction ExerciseScreen( { route }){\r\n\r\n  const {id} = route.params;\r\n    \r\n  const [workoutsDB, setWorkoutsDB] = useState([]);\r\n\r\n  const [name, setName] = useState('');\r\n  const [weight, setWeight] = useState('');\r\n  const [reps, setReps] = useState('');\r\n  const [sets, setSets] = useState('');\r\n\r\n  const exerciseName = (val) => {\r\n    setName(val)\r\n  }\r\n\r\n  const exerciseWeight = (val) => {\r\n    setWeight(val)\r\n  } \r\n\r\n  const exerciseReps = (val) => {\r\n    setReps(val)\r\n  } \r\n\r\n  const exerciseSets = (val) => {\r\n    setSets(val)\r\n  } \r\n\r\n  useEffect (() => {\r\n    const realtime = onSnapshot(collection(db, \"WorkoutDay\"), (snapshot) => {\r\n      setWorkoutsDB(snapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id })));\r\n    });\r\n    return realtime;\r\n  }, []);\r\n\r\n  const sendToDatabase = async () => \r\n  {\r\n    const randomExerciseID = Math.random().toString();\r\n\r\n    await updateDoc(doc(db, \"WorkoutDay\", id), {\r\n\r\n      exerciseArray: arrayUnion({\r\n        exercise: name,\r\n        weight: weight,\r\n        reps: reps,\r\n        sets: sets,\r\n        exerciseUID: randomExerciseID,\r\n      })\r\n\r\n    })\r\n  };\r\n\r\n  const deletDoc = async (exercise, weight, reps, sets, exerciseUID, object) =>\r\n  {\r\n    console.log(exercise);\r\n    console.log(exerciseUID);\r\n    console.log(object);\r\n\r\n    // await updateDoc(doc(db, \"WorkoutDay\", id, exerciseArray[object]), {\r\n    //   exerciseArray: arrayRemove({ exercise: exercise, weight: weight, reps: reps, sets: sets, exerciseUID: exerciseUID}),\r\n    \r\n    // })\r\n  }\r\n\r\n  return (\r\n    <ScrollView>\r\n\r\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n      <Text>Exercises</Text>     \r\n\r\n      <Text>{id}</Text>\r\n\r\n      <TextInput\r\n          style={styles.input}\r\n          placeholder='Exercise Name'\r\n          onChangeText={exerciseName}\r\n        >\r\n      </TextInput>\r\n\r\n      <View style={{ flexDirection:\"row\" }}>\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder='Weight'\r\n          onChangeText={exerciseWeight}\r\n        >\r\n        </TextInput>\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder='Reps'\r\n          onChangeText={exerciseReps}\r\n        >\r\n        </TextInput>\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder='Sets'\r\n          onChangeText={exerciseSets}\r\n        >\r\n        </TextInput>\r\n      </View> \r\n\r\n      <View style={{ flexDirection:\"row\" }}>\r\n        <Button onPress={() => sendToDatabase() } title='save' color='coral' /> \r\n      </View>\r\n\r\n      {/* data.exerciseArray[i].exercise, data.exerciseArray[i].weight, data.exerciseArray[i].reps, data.exerciseArray[i].sets, data.exerciseArray[i].exerciseUID */}\r\n      {workoutsDB.map((data) => {\r\n        if(data.ubid == id) //[0].exercise\r\n          {\r\n              var output=[];\r\n              var i = 0;\r\n              var obj;\r\n                for(var object in data.exerciseArray)//var i = 0; i < data.exerciseArray.length; i++\r\n                {\r\n                  // console.log(i);\r\n                  obj = data.exerciseArray[object];\r\n                  var tempItem=\r\n                  (\r\n                    <View>\r\n                      <Text>{object}</Text>\r\n                      <Text>{obj.exercise}</Text>\r\n\r\n                      <View style={{ flexDirection:\"row\" }}>\r\n                        <Text>{obj.weight}</Text>\r\n                        <Text>{obj.reps}</Text>\r\n                        <Text>{obj.sets}</Text>\r\n                      </View>\r\n\r\n                      <Button title={obj.exerciseUID} color='red' onPress={() => deletDoc(obj.exercise, obj.weight, obj.reps, obj.sets, obj.exerciseUID, object) }></Button>\r\n                    \r\n                      \r\n                    </View> \r\n                  );\r\n                  output[i] = (tempItem);\r\n                  i++;\r\n                }\r\n\r\n              return (\r\n                <View key={data.id} >\r\n                  {output}\r\n                  {/* <Text>{output.exerciseArray[0].exercise}</Text> */}\r\n\r\n                  {/* <LineChart\r\n                    data={{\r\n                    labels: ['January', 'February', 'March', 'April', 'May', 'June'],\r\n                    datasets: [{\r\n                        data: [\r\n                        Math.random() * 100,\r\n                        Math.random() * 100,\r\n                        Math.random() * 100,\r\n                        Math.random() * 100,\r\n                        Math.random() * 100,\r\n                        Math.random() * 100\r\n                        ]\r\n                    }]\r\n                    }}\r\n                    width={Dimensions.get('window').width} // from react-native\r\n                    height={220}\r\n                    chartConfig={{\r\n                    backgroundColor: '#e26a00',\r\n                    backgroundGradientFrom: '#fb8c00',\r\n                    backgroundGradientTo: '#ffa726',\r\n                    decimalPlaces: 2, // optional, defaults to 2dp\r\n                    color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n                    style: {\r\n                        borderRadius: 16\r\n                    }\r\n                    }}\r\n                    bezier\r\n                    style={{\r\n                    marginVertical: 8,\r\n                    borderRadius: 16\r\n                    }}\r\n                  /> */}\r\n                </View>\r\n              );\r\n          }\r\n      })}\r\n\r\n    </View>\r\n    </ScrollView>\r\n\r\n  );\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create\r\n({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n\r\n  input: {\r\n    height: 40,\r\n    margin: 12,\r\n    borderWidth: 2,\r\n    padding: 10,\r\n    backgroundColor: 'white'\r\n  },\r\n});\r\n\r\nexport default ExerciseScreen;\r\n"]},"metadata":{},"sourceType":"module"}